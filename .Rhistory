axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +  # Set x and y axis labels as blank
xlim(0.900, max(career_statistics$mean_sv_pct))
# Calculate career statistics for goalies
career_statistics <-
shots %>%  # tibble containing shot data loaded by the 'data' script
anti_join(goalies_to_remove, by = 'goalie_name') %>% # Filter goalies who haven't played the first or last season of available data
group_by(goalie_name) %>%  # Group shots by goalie name
summarize(
shots = n(),  # Count the number of shots for each goalie
goals = sum(goal),  # Calculate the total number of goals allowed
saves = shots - goals, # Calculate the total number of saves made by subtracting the total goals from the total shots
mean_sv_pct = 1 - mean(goal),  # Calculate the mean save percentage by subtracting the mean of goals from 1
.groups = 'drop') %>%  # Drop grouping information
filter(shots > 200) %>%  # Keep goalies with more than 750 shots
filter(goals > 0) %>%
drop_na()  # Remove rows with missing values
# Create a histogram of mean save percentages
career_statistics %>%
ggplot() +
geom_histogram(aes(mean_sv_pct), fill = single_color, col = 'black', alpha = 0.75, bins = 12) +  # Plot histogram with specified aesthetics
dark_theme() +  # Apply a dark theme to the plot
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +  # Set x and y axis labels as blank
xlim(0.915, 0.957)
# Save the plot as a PNG file
ggsave(
filename = 'goalie-performance-1-1.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
# Generate sequence of save percentage values to assign density functions to
sv_pct_fits = seq(0.915, 0.957, length = 45)
# Fit a beta distribution to the career save percentages using maximum likelihood estimation
goalie_prior = fitdist(career_statistics$mean_sv_pct, "beta", method = 'mle')
# Extract the estimated shape parameters from the fitted beta distribution
alpha_0 = goalie_prior$estimate[1]
beta_0 = goalie_prior$estimate[2]
# Calculate the prior probability densities for the sequence of save percentage values
prior_points = dbeta(sv_pct_fits, shape1 = alpha_0, shape2 = beta_0)
# Normalize probabilities to sum to 1
prior_points = prior_points/sum(prior_points)
# Create a histogram of career save percentages overlaid with the prior probability densities
ggplot() +
geom_histogram(data = career_statistics, aes(mean_sv_pct), fill = single_color, col = 'black', alpha = 0.75, bins = 15) +
geom_line(aes(sv_pct_fits, prior_points*180*3), col = 'white', lwd = 1, alpha = 0.75) +
dark_theme() +
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +
xlim(0.915, 0.957)
# Create a histogram of career save percentages overlaid with the prior probability densities
ggplot() +
geom_histogram(data = career_statistics, aes(mean_sv_pct), fill = single_color, col = 'black', alpha = 0.75, bins = 15) +
geom_line(aes(sv_pct_fits, prior_points*nrow(career_statistics)*3), col = 'white', lwd = 1, alpha = 0.75) +
dark_theme() +
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +
xlim(0.915, 0.957)
# Calculate career statistics for goalies
career_statistics <-
shots %>%  # tibble containing shot data loaded by the 'data' script
group_by(goalie_name) %>%  # Group shots by goalie name
summarize(
shots = n(),  # Count the number of shots for each goalie
goals = sum(goal),  # Calculate the total number of goals allowed
saves = shots - goals, # Calculate the total number of saves made by subtracting the total goals from the total shots
mean_sv_pct = 1 - mean(goal),  # Calculate the mean save percentage by subtracting the mean of goals from 1
.groups = 'drop') %>%  # Drop grouping information
filter(shots > 200) %>%  # Keep goalies with more than 750 shots
filter(goals > 0) %>%
drop_na()  # Remove rows with missing values
# Create a histogram of mean save percentages
career_statistics %>%
ggplot() +
geom_histogram(aes(mean_sv_pct), fill = single_color, col = 'black', alpha = 0.75, bins = 12) +  # Plot histogram with specified aesthetics
dark_theme() +  # Apply a dark theme to the plot
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +  # Set x and y axis labels as blank
xlim(0.915, 0.957)
# Create a histogram of mean save percentages
career_statistics %>%
ggplot() +
geom_histogram(aes(mean_sv_pct), fill = single_color, col = 'black', alpha = 0.75, bins = 15) +  # Plot histogram with specified aesthetics
dark_theme() +  # Apply a dark theme to the plot
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank()  # Remove y-axis ticks
) +
labs(x = '', y = '') +  # Set x and y axis labels as blank
xlim(0.915, 0.957)
# Save the plot as a PNG file
ggsave(
filename = 'goalie-performance-1-1.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt')
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(event_probability = (225/325) + (100/275))
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(event_probability = 1 - (225/325) + (100/275))
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(event_probability = (1 - (225/325) + (100/275))/2)
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
take = (((225/325) + (100/275))/2) - 1)
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
take = (((225/325) + (100/275))/2))
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
take = (((225/325) + (100/275))))
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
take = (((225/325) + (100/275)) - 1))
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
take = (((225/325) + (100/275)) - 1)/2)
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
over_prob = ifelse(over > 0, 100/(100 + over), -over/-(over - 100)),
under_prob = ifelse(under > 0, 100/(100 + under), -under/-(under - 100)),
take = ((over_prob + under_prob) - 1)/2)
read_csv('~/Documents/projects/draft-rankings/data/over_under.txt') %>%
mutate(
over_prob = ifelse(over > 0, 100/(100 + over), -over/-(over - 100)),
under_prob = ifelse(under > 0, 100/(100 + under), -under/-(under - 100)),
take = ((over_prob + under_prob) - 1)/2,
across(over_prob:under_prob, ~ . - take))
# Required packages: dplyr, MASS, fitdistrplus, ggplot2; loaded with 'load/libraries.R'
# Required objects:
# - shots (tibble): Contains shot data; created with 'load/data.R'
# - single_color (string): Specifies the fill color for single color plots; created with 'load/functions.R'
# - multiple_colors (function): Specifies the fill color for gradients; created with 'load/functions.R'
# Load necessary libraries from the 'libraries.R' file
source('load/libraries.R')
# Load custom functions from the 'functions.R' file
source('load/functions.R')
# Load data from the 'data.R' file
source('load/data.R')
beta_1 = 346.7239
beta_2 = 5603.3298
# Remove goalies whose career spans outside of the range of interest
# Summary of goalie statistics in initial set
shots %>%
group_by(goalie_name) %>%  # Group shots by goalie name
summarize(
seasons = n_distinct(season),
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = 1 - (exp_g/shots),  # Calculate expected save percentage
adj_sv_pct = 0.939 + ((sv_pct - exp_f)),  # Calculate adjusted save percentage
inv_adj_sv_pct = 1 - adj_sv_pct,  # Calculate inverse adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
.groups = 'drop'
) %>%
summarize(
count = n(),
across(c(seasons, shots, adj_sv_pct), list(mean, ~sum(.*(exp_g/sum(exp_g)))))
)
# Summary of goalie statistics in filtered set
shots %>%
inner_join(goalie_data %>% distinct(goalie_name, .keep_all = TRUE), by = c('goalie_name')) %>%  # Join with goalie_data to get goalie dob
group_by(goalie_name) %>%  # Group shots by goalie name
summarize(
seasons = n_distinct(season),
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = 1 - (exp_g/shots),  # Calculate expected save percentage
adj_sv_pct = 0.939 + ((sv_pct - exp_f)),  # Calculate adjusted save percentage
inv_adj_sv_pct = 1 - adj_sv_pct,  # Calculate inverse adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
.groups = 'drop'
) %>%
summarize(
count = n(),
across(c(seasons, shots, adj_sv_pct), list(mean, ~sum(.*(exp_g/sum(exp_g)))))
)
# Modify shots tibble to include goalie ages based on goalie dob in goalie_data
shots_with_ages <-
shots %>%
group_by(season) %>%
mutate(
game_days = n_distinct(game_id),  # Count the number of distinct game_ids in each season
day_of_year = case_when(
game_id == min(game_id) ~ 245,  # Set the first game of the season to day 245
game_id == max(game_id) ~ 518,  # Set the last game of the season to day 518
TRUE ~ NA),
day_of_year = 245 + (game_id - min(game_id))*(518 - 245)/game_days,  # Distribute game_days across day_of_year
year = ifelse(day_of_year > 365, season + 1, season),  # Increment year if day_of_year exceeds 365
game_date = ymd(paste0(year, '-01-01')),  # Set the game_date to January 1 of the corresponding year
day_of_year = ifelse(day_of_year > 365, day_of_year - 365, day_of_year),  # Adjust day_of_year if it exceeds 365
game_date = game_date + day_of_year) %>%  # Calculate the final game_date
ungroup() %>%
left_join(goalie_data %>% distinct(goalie_name, .keep_all = TRUE), by = c('goalie_name')) %>%  # Join with goalie_data to get goalie dob
mutate(age = as.numeric(game_date - dob)/365) %>%  # Calculate goalie age
drop_na(goalie_name)
shots_with_ages %>%
count(goalie_name, dob) %>%
filter(is.na(dob))
# Plot average save percentage by goalie age (grouped at first decimal)
shots_with_ages %>%
mutate(age = round(age, 1)) %>% # Discretize age to the first decimal for grouping
group_by(age) %>%
summarize(
shots = n(),  # Count the number of shots for each age
goals = sum(goal),  # Sum the number of goals for each age
saves = shots - goals,  # Calculate the number of saves for each age
sv_pct = saves/shots,  # Calculate the save percentage for each age
.groups = 'drop'
) %>%
ggplot() +
geom_point(aes(age, sv_pct, alpha = sqrt(shots)), col = single_color) +  # Plot age vs. save percentage with varying point size based on shots
scale_y_continuous(limits = c(0.915, 0.965), labels = scales::percent) +  # Customize y-axis limits and labels
dark_theme() +  # Apply custom dark theme to the plot
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines to be black
legend.position = "none"  # Remove the legend
) +
rremove("xlab") +
rremove("ylab")
# Save the plot as a PNG file
ggsave(
filename = 'goalie-performance-3-1.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
# Plot harmonic mean of change in save percentage from age n to age n + 1
raw_delta_ages <-
shots_with_ages %>%
mutate(age = round(age, 0)) %>%
group_by(goalie_name, age) %>%  # Group shots by goalie name
dplyr::summarize(
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = 1 - (exp_g/shots),  # Calculate expected save percentage
adj_sv_pct = ((sv_pct - exp_f)),  # Calculate adjusted save percentage
inv_adj_sv_pct = 1 - adj_sv_pct,  # Calculate inverse adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
.groups = 'drop'
) %>%
group_by(goalie_name) %>%
mutate(
delta_sv_pct = adj_sv_pct - lag(adj_sv_pct)  # Calculate the change in save percentage for each goalie compared to the previous age
) %>%
filter(shots > 100, lag(shots) > 100) %>%
ungroup() %>%
drop_na() %>%
group_by(age) %>%
summarize(
occasions = n(),  # Count the number of goalies for each age
delta_sv_pct = sum(delta_sv_pct*shots/sum(shots), na.rm = TRUE),  # Calculate the weighted mean change in save percentage for each age
.groups = 'drop'
) %>%
filter(age >= 22, age <= 38) %>%
drop_na() %>%
mutate(cml_delta = cumsum(delta_sv_pct)) %>%
mutate(cml_delta = cml_delta - max(cml_delta))
raw_delta_ages %>%
ggplot(aes(age, cml_delta, alpha = sqrt(occasions))) +
geom_point(col = single_color) +  # Plot age vs. cumulative change in save percentage with varying point size based on the number of goalies
geom_smooth(col = single_color, span = 1, alpha = 0.20, fill = 'white') +  # Add smoothed line to the plot
scale_y_continuous(labels = scales::percent) +  # Customize y-axis labels as percentages
labs(y = 'Mean Observed Change in SV%\n') +  # Set x and y axis labels
dark_theme() +  # Apply custom dark theme to the plot
theme(
panel.grid.major = element_line(color = 'black'),  # Customize major grid lines to be black
legend.position = "none"  # Remove the legend
) +
rremove("xlab")
# Save the plot as a PNG file
ggsave(
filename = 'goalie-performance-3-2.png',  # Specify the file name
path = '/Users/ada/Documents/projects/spazznolo.github.io/figs',  # Specify the file path
width = 5,  # Set the width of the plot
height = 3,  # Set the height of the plot
device = 'png',  # Specify the device to use for saving (PNG format)
dpi = 320  # Set the resolution of the plot
)
exp_f_by_season <-
shots %>%
group_by(season) %>%
summarize(
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
exp_f = 1 - (exp_g/shots)  # Calculate expected save percentage
) %>%
select(season, season_exp_f = exp_f)
model <- loess(cml_delta ~ age, data = raw_delta_ages, span = 1)
xrange <- range(raw_delta_ages$age)
xseq <- seq(from=xrange[1], to=xrange[2], length=17)
pred <- predict(model, newdata = data.frame(age = xseq), se=TRUE)
y = unname(pred$fit)
y = y - max(y)
age_adjustment <-
tibble(age = xseq, age_adj = -y) %>%
add_row(age = 20, age_adj = 0.00240) %>%
add_row(age = 21, age_adj = 0.00180) %>%
add_row(age = 39, age_adj = 0.00615) %>%
add_row(age = 40, age_adj = 0.00715)
# Calculate career statistics for goalies
career_statistics <-
shots_with_ages %>%  # tibble containing shot data loaded by the 'data' script
mutate(age = round(age, 0)) %>%
drop_na() %>%
left_join(exp_f_by_season, by = 'season') %>%
left_join(age_adjustment, by = 'age') %>%
group_by(goalie_name, season) %>%  # Group shots by goalie name
dplyr::summarize(
age = max(age),
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = (1 - (exp_g/shots)) - mean(age_adj),  # Calculate expected save percentage
adj_exp_g = (1 - exp_f)*shots,
sv_pct_a_exp = sv_pct - exp_f,  # Calculate adjusted save percentage
adj_sv_pct = mean_exp_f + sv_pct_a_exp,  # Calculate adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
adj_goals = shots - adj_saves,  # Calculate adjusted saves
.groups = 'drop'
) %>%
group_by(goalie_name) %>%
summarize(
age = max(age),
shots = sum(shots),  # Count the number of shots
goals = sum(goals),  # Sum the number of goals
ex_g = sum(adj_exp_g),
exp_f = 1 - (ex_g/shots),
sv_pct = 1 - (goals/shots),  # Calculate save percentage
adj_saves = sum(adj_saves),
adj_goals = sum(adj_goals),
adj_sv_pct = adj_saves/(adj_saves + adj_goals),
inv_adj_sv_pct = 1 - adj_sv_pct,
.groups = 'drop'
) %>%
#dplyr::filter(exp_g > 10) %>%  # Filter rows where expected goals is greater than 10
drop_na()  # Drop rows with missing values
mean_exp_f = .9
# Calculate career statistics for goalies
career_statistics <-
shots_with_ages %>%  # tibble containing shot data loaded by the 'data' script
mutate(age = round(age, 0)) %>%
drop_na() %>%
left_join(exp_f_by_season, by = 'season') %>%
left_join(age_adjustment, by = 'age') %>%
group_by(goalie_name, season) %>%  # Group shots by goalie name
dplyr::summarize(
age = max(age),
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = (1 - (exp_g/shots)) - mean(age_adj),  # Calculate expected save percentage
adj_exp_g = (1 - exp_f)*shots,
sv_pct_a_exp = sv_pct - exp_f,  # Calculate adjusted save percentage
adj_sv_pct = mean_exp_f + sv_pct_a_exp,  # Calculate adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
adj_goals = shots - adj_saves,  # Calculate adjusted saves
.groups = 'drop'
) %>%
group_by(goalie_name) %>%
summarize(
age = max(age),
shots = sum(shots),  # Count the number of shots
goals = sum(goals),  # Sum the number of goals
ex_g = sum(adj_exp_g),
exp_f = 1 - (ex_g/shots),
sv_pct = 1 - (goals/shots),  # Calculate save percentage
adj_saves = sum(adj_saves),
adj_goals = sum(adj_goals),
adj_sv_pct = adj_saves/(adj_saves + adj_goals),
inv_adj_sv_pct = 1 - adj_sv_pct,
.groups = 'drop'
) %>%
#dplyr::filter(exp_g > 10) %>%  # Filter rows where expected goals is greater than 10
drop_na()  # Drop rows with missing values
# Calculate adjusted save percentage and posterior alpha and beta values
career_posteriors <-
career_statistics %>%
mutate(
post_sv_pct = (beta_1 + shots - adj_saves)/(beta_1 + beta_2 + shots),  # Calculate adjusted save percentage
post_sv_pct = 1 - post_sv_pct,
alpha_post = beta_1 + shots - adj_saves,  # Calculate posterior alpha values
beta_post = beta_2 + adj_saves,  # Calculate posterior beta values
better_avg = map2_dbl(alpha_post, beta_post, ~mean(rbeta(100000, shape1 = .x, shape2 = .y) < 1 - mean(exp_f_by_season$season_exp_f)))  # Calculate proportion of values greater than median_sv_pct
)
exp_f_by_season <-
shots %>%
group_by(season) %>%
summarize(
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
exp_f = 1 - (exp_g/shots)  # Calculate expected save percentage
) %>%
mutate(exp_f = (exp_f + 2*mean(exp_f))/3) %>%
select(season, season_exp_f = exp_f)
mean_exp_f <- mean(exp_f_by_season$season_exp_f)
# Calculate career statistics for goalies
career_statistics <-
shots_with_ages %>%  # tibble containing shot data loaded by the 'data' script
mutate(age = round(age, 0)) %>%
drop_na() %>%
left_join(exp_f_by_season, by = 'season') %>%
left_join(age_adjustment, by = 'age') %>%
group_by(goalie_name, season) %>%  # Group shots by goalie name
dplyr::summarize(
age = max(age),
shots = dplyr::n(),  # Count the number of shots
goals = sum(goal),  # Sum the number of goals
sv_pct = 1 - (goals/shots),  # Calculate save percentage
exp_g = sum(x_goal),  # Sum expected goals
gsa_exp = (sum(x_goal)/sum(goal)) - 1 + 0.5,  # Calculate GSA-x
exp_f = (1 - (exp_g/shots)) - mean(age_adj),  # Calculate expected save percentage
adj_exp_g = (1 - exp_f)*shots,
sv_pct_a_exp = sv_pct - exp_f,  # Calculate adjusted save percentage
adj_sv_pct = mean_exp_f + sv_pct_a_exp,  # Calculate adjusted save percentage
adj_saves = adj_sv_pct*shots,  # Calculate adjusted saves
adj_goals = shots - adj_saves,  # Calculate adjusted saves
.groups = 'drop'
) %>%
group_by(goalie_name) %>%
summarize(
age = max(age),
shots = sum(shots),  # Count the number of shots
goals = sum(goals),  # Sum the number of goals
ex_g = sum(adj_exp_g),
exp_f = 1 - (ex_g/shots),
sv_pct = 1 - (goals/shots),  # Calculate save percentage
adj_saves = sum(adj_saves),
adj_goals = sum(adj_goals),
adj_sv_pct = adj_saves/(adj_saves + adj_goals),
inv_adj_sv_pct = 1 - adj_sv_pct,
.groups = 'drop'
) %>%
#dplyr::filter(exp_g > 10) %>%  # Filter rows where expected goals is greater than 10
drop_na()  # Drop rows with missing values
# Calculate adjusted save percentage and posterior alpha and beta values
career_posteriors <-
career_statistics %>%
mutate(
post_sv_pct = (beta_1 + shots - adj_saves)/(beta_1 + beta_2 + shots),  # Calculate adjusted save percentage
post_sv_pct = 1 - post_sv_pct,
alpha_post = beta_1 + shots - adj_saves,  # Calculate posterior alpha values
beta_post = beta_2 + adj_saves,  # Calculate posterior beta values
better_avg = map2_dbl(alpha_post, beta_post, ~mean(rbeta(100000, shape1 = .x, shape2 = .y) < 1 - mean(exp_f_by_season$season_exp_f)))  # Calculate proportion of values greater than median_sv_pct
)
career_posteriors <-
career_statistics %>%
mutate(
post_sv_pct = (283.4727 + shots - adj_saves)/(283.4727 + 4536.9034 + shots),  # Calculate adjusted save percentage
post_sv_pct = 1 - post_sv_pct,
alpha_post = 283.4727 + shots - adj_saves,  # Calculate posterior alpha values
beta_post = 4536.9034 + adj_saves,  # Calculate posterior beta values
better_avg = map2_dbl(alpha_post, beta_post, ~mean(rbeta(100000, shape1 = .x, shape2 = .y) < 1 - mean(exp_f_by_season$season_exp_f)))  # Calculate proportion of values greater than median_sv_pct
)
mean(career_posteriors$post_sv_pct)
career_posteriors %>%
inner_join(shots_with_cml %>% distinct(goalie_name, status), by = 'goalie_name') %>%
mutate(share = shots/sum(shots)) %>%
group_by(status) %>%
summarize(
count = n(),
better_exp = mean(post_sv_pct > exp_f),
better_avg = mean(better_avg),
harm_mean = sum((post_sv_pct > exp_f)*share),
harm_mean = sum(better_avg*share)
)
career_posteriors
View(career_posteriors)
